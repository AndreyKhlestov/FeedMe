version: "3.8"

volumes:
  back_static:

services:

  db:
    image: postgres:14
    env_file:
      - .env
    networks:
      - network-bot
    volumes:
      - ./database/pgdata:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 5s
      timeout: 5s
      retries: 5

  django_project:
    build:
      context: .
    command: >
      sh -c "python django_app.py makemigrations &&
      python django_app.py migrate &&
      python django_app.py collectstatic --noinput &&
      cp -r ./admin_panel/collected_static /backend_static &&
      cp -r ./admin_panel/static /backend_static &&
      gunicorn --bind 0.0.0.0:8000 admin_panel.django_settings.wsgi:application --chdir=/app/admin_panel"
    networks:
      - network-bot
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - back_static:/backend_static
      - ./database/media:/app/admin_panel/media
    restart: always

  redis:
    image: redis:alpine
    env_file:
      - .env
    networks:
      - network-bot
    restart: always

  bot:
    build:
      context: .
    command: sh -c "while ! nc -z django_project 8000; do sleep 1; done && python bot.py"
    networks:
      - network-bot
    env_file:
      - .env
    depends_on:
      - db
      - django_project
      - redis
    volumes:
      - ./database/media:/app/admin_panel/media
    restart: always

  nginx:
    image: nginx:1.22.1
    ports:
      - "80:80"
    networks:
      - network-bot
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - back_static:/backend_static
      - ./database/media:/media
    depends_on:
      - django_project
    restart: always

networks:
  network-bot:
    driver: bridge